{"ast":null,"code":"// import { useContext, useState } from \"react\"\n// // import { Form, Button } from \"react-bootstrap\"\n// // import authService from \"../../services/auth.service\"\n// // import { useNavigate } from 'react-router-dom'\n// import { AuthContext } from './../../context/auth.context'\n// // const Loginform = () => {\n// //     const [loginData, setLoginData] = useState({\n// //         password: '',\n// //         email: ''\n// //     })\n// //     const navigate = useNavigate()\n// //     const { storeToken, authenticateUser } = useContext(AuthContext)\n// //     const handleSubmit = e => {\n// //         e.preventDefault()\n// //         authService\n// //             .login(loginData)\n// //             .then(({ data }) => {\n// //                 storeToken(data.authToken)\n// //                 authenticateUser()\n// //                 navigate('/')\n// //             })\n// //             .catch(err => console.log(err))\n// //     }\n// //     const handleInputChange = e => {\n// //         const { value, name } = e.currentTarget\n// //         setLoginData({ ...loginData, [name]: value })\n// //     }\n// //     const { password, email } = loginData\n// //     return (\n// //         <Form onSubmit={handleSubmit}>\n// //             <Form.Group className=\"mb-3\" controlId=\"email\">\n// //                 <Form.Label>Email</Form.Label>\n// //                 <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n// //             </Form.Group>\n// //             <Form.Group className=\"mb-3\" controlId=\"password\">\n// //                 <Form.Label>Contraseña</Form.Label>\n// //                 <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n// //             </Form.Group>\n// //             <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n// //         </Form>\n// //     )\n// // }\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import authService from \"../../services/auth.service\"\n// import { useFormik, FormikProvider, Form, useField } from 'formik';\n// import './loginForm.css';\n// import * as Yup from 'yup';\n// const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n// const TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n//     const [field, meta] = useField(props);\n//     // Show inline feedback if EITHER\n//     // - the input is focused AND value is longer than 2 characters\n//     // - or, the has been visited (touched === true)\n//     const [didFocus, setDidFocus] = React.useState(false);\n//     const handleFocus = () => setDidFocus(true);\n//     const showFeedback =\n//         (!!didFocus && field.value.trim().length > 2) || meta.touched;\n//     return (\n//         <div\n//             className={`form-control ${showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n//                 }`}\n//         >\n//             <div className=\"flex items-center space-between\">\n//                 <label htmlFor={props.id}>{label}</label>{' '}\n//                 {showFeedback ? (\n//                     <div\n//                         id={`${props.id}-feedback`}\n//                         aria-live=\"polite\"\n//                         className=\"feedback text-sm\"\n//                     >\n//                         {meta.error ? meta.error : '✓'}\n//                     </div>\n//                 ) : null}\n//             </div>\n//             <input\n//                 {...props}\n//                 {...field}\n//                 aria-describedby={`${props.id}-feedback ${props.id}-help`}\n//                 onFocus={handleFocus}\n//             />\n//             <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n//                 {helpText}\n//             </div>\n//         </div>\n//     );\n// };\n// const Loginform = () => {\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n//     const formik = useFormik({\n//         initialValues: {\n//             email: '',\n//             password: '',\n//         },\n//         onSubmit: async (values) => {\n//             await sleep(500);\n//             alert(JSON.stringify(values, null, 2));\n//             authService\n//                 .login(TextInputLiveFeedback)\n//                 .then(({ data }) => {\n//                     storeToken(data.authToken)\n//                     authenticateUser()\n//                     navigate('/')\n//                 })\n//                 .catch(err => console.log(err))\n//         },\n//         validationSchema: Yup.object({\n//             email: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .max(20, 'Must be less  than 20 characters')\n//                 .required('Email is required')\n//                 .matches(\n//                     /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n//             password: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .required('Password is required')\n//                 .matches(\n//                     /^[a-zA-Z0-9]+$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n//         }),\n//     });\n//     return (\n//         <FormikProvider value={formik}>\n//             <Form>\n//                 <TextInputLiveFeedback\n//                     label=\"Email\"\n//                     id=\"email\"\n//                     name=\"email\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"email\"\n//                 />\n//                 <TextInputLiveFeedback\n//                     label=\"Password\"\n//                     id=\"password\"\n//                     name=\"password\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"password\"\n//                 />\n//                 <div>\n//                     <button type=\"submit\">Submit</button>\n//                     <button type=\"reset\">Reset</button>\n//                 </div>\n//             </Form>\n//         </FormikProvider>\n//     );\n// };\n// export default Loginform","map":{"version":3,"sources":["/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { useContext, useState } from \"react\"\n// // import { Form, Button } from \"react-bootstrap\"\n// // import authService from \"../../services/auth.service\"\n// // import { useNavigate } from 'react-router-dom'\n// import { AuthContext } from './../../context/auth.context'\n\n\n// // const Loginform = () => {\n\n// //     const [loginData, setLoginData] = useState({\n// //         password: '',\n// //         email: ''\n// //     })\n\n// //     const navigate = useNavigate()\n\n// //     const { storeToken, authenticateUser } = useContext(AuthContext)\n\n// //     const handleSubmit = e => {\n// //         e.preventDefault()\n\n// //         authService\n// //             .login(loginData)\n// //             .then(({ data }) => {\n// //                 storeToken(data.authToken)\n// //                 authenticateUser()\n// //                 navigate('/')\n// //             })\n// //             .catch(err => console.log(err))\n// //     }\n\n// //     const handleInputChange = e => {\n// //         const { value, name } = e.currentTarget\n// //         setLoginData({ ...loginData, [name]: value })\n// //     }\n\n// //     const { password, email } = loginData\n\n\n\n// //     return (\n\n// //         <Form onSubmit={handleSubmit}>\n\n// //             <Form.Group className=\"mb-3\" controlId=\"email\">\n// //                 <Form.Label>Email</Form.Label>\n// //                 <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n// //             </Form.Group>\n\n// //             <Form.Group className=\"mb-3\" controlId=\"password\">\n// //                 <Form.Label>Contraseña</Form.Label>\n// //                 <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n// //             </Form.Group>\n\n// //             <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n// //         </Form>\n\n// //     )\n// // }\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import authService from \"../../services/auth.service\"\n// import { useFormik, FormikProvider, Form, useField } from 'formik';\n// import './loginForm.css';\n// import * as Yup from 'yup';\n\n// const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\n// const TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n//     const [field, meta] = useField(props);\n\n//     // Show inline feedback if EITHER\n//     // - the input is focused AND value is longer than 2 characters\n//     // - or, the has been visited (touched === true)\n//     const [didFocus, setDidFocus] = React.useState(false);\n//     const handleFocus = () => setDidFocus(true);\n//     const showFeedback =\n//         (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n//     return (\n//         <div\n//             className={`form-control ${showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n//                 }`}\n//         >\n//             <div className=\"flex items-center space-between\">\n//                 <label htmlFor={props.id}>{label}</label>{' '}\n//                 {showFeedback ? (\n//                     <div\n//                         id={`${props.id}-feedback`}\n//                         aria-live=\"polite\"\n//                         className=\"feedback text-sm\"\n//                     >\n//                         {meta.error ? meta.error : '✓'}\n//                     </div>\n//                 ) : null}\n//             </div>\n//             <input\n//                 {...props}\n//                 {...field}\n//                 aria-describedby={`${props.id}-feedback ${props.id}-help`}\n//                 onFocus={handleFocus}\n//             />\n//             <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n//                 {helpText}\n//             </div>\n//         </div>\n//     );\n// };\n\n// const Loginform = () => {\n\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n\n\n//     const formik = useFormik({\n//         initialValues: {\n//             email: '',\n//             password: '',\n            \n\n//         },\n//         onSubmit: async (values) => {\n//             await sleep(500);\n//             alert(JSON.stringify(values, null, 2));\n\n//             authService\n//                 .login(TextInputLiveFeedback)\n//                 .then(({ data }) => {\n//                     storeToken(data.authToken)\n//                     authenticateUser()\n//                     navigate('/')\n//                 })\n//                 .catch(err => console.log(err))\n//         },\n//         validationSchema: Yup.object({\n\n//             email: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .max(20, 'Must be less  than 20 characters')\n//                 .required('Email is required')\n//                 .matches(\n//                     /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n\n//             password: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .required('Password is required')\n//                 .matches(\n//                     /^[a-zA-Z0-9]+$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n//         }),\n//     });\n\n//     return (\n//         <FormikProvider value={formik}>\n//             <Form>\n//                 <TextInputLiveFeedback\n//                     label=\"Email\"\n//                     id=\"email\"\n//                     name=\"email\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"email\"\n//                 />\n\n//                 <TextInputLiveFeedback\n//                     label=\"Password\"\n//                     id=\"password\"\n//                     name=\"password\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"password\"\n//                 />\n//                 <div>\n//                     <button type=\"submit\">Submit</button>\n//                     <button type=\"reset\">Reset</button>\n//                 </div>\n//             </Form>\n//         </FormikProvider>\n//     );\n// };\n\n// export default Loginform\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}