{"ast":null,"code":"var _jsxFileName = \"/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// import { useContext, useState } from \"react\"\n// import { Form, Button } from \"react-bootstrap\"\n// import authService from \"../../services/auth.service\"\n// import { useNavigate } from 'react-router-dom'\n// import { AuthContext } from './../../context/auth.context'\n// const Loginform = () => {\n//     const [loginData, setLoginData] = useState({\n//         password: '',\n//         email: ''\n//     })\n//     const navigate = useNavigate()\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n//     const handleSubmit = e => {\n//         e.preventDefault()\n//         authService\n//             .login(loginData)\n//             .then(({ data }) => {\n//                 storeToken(data.authToken)\n//                 authenticateUser()\n//                 navigate('/')\n//             })\n//             .catch(err => console.log(err))\n//     }\n//     const handleInputChange = e => {\n//         const { value, name } = e.currentTarget\n//         setLoginData({ ...loginData, [name]: value })\n//     }\n//     const { password, email } = loginData\n//     return (\n//         <Form onSubmit={handleSubmit}>\n//             <Form.Group className=\"mb-3\" controlId=\"email\">\n//                 <Form.Label>Email</Form.Label>\n//                 <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"password\">\n//                 <Form.Label>Contraseña</Form.Label>\n//                 <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n//             </Form.Group>\n//             <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n//         </Form>\n//     )\n// }\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useFormik, FormikProvider, Form, useField } from 'formik';\nimport './loginForm.css';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nconst Loginform = _ref => {\n  _s();\n\n  let {\n    label,\n    helpText,\n    ...props\n  } = _ref;\n  const [field, meta] = useField(props); // Show inline feedback if EITHER\n  // - the input is focused AND value is longer than 2 characters\n  // - or, the has been visited (touched === true)\n\n  const [didFocus, setDidFocus] = React.useState(false);\n\n  const handleFocus = () => setDidFocus(true);\n\n  const showFeedback = !!didFocus && field.value.trim().length > 2 || meta.touched;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control ${showFeedback ? meta.error ? 'invalid' : 'valid' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center space-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.id,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), ' ', showFeedback ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: `${props.id}-feedback`,\n        \"aria-live\": \"polite\",\n        className: \"feedback text-sm\",\n        children: meta.error ? meta.error : '✓'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...props,\n      ...field,\n      \"aria-describedby\": `${props.id}-feedback ${props.id}-help`,\n      onFocus: handleFocus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xs\",\n      id: `${props.id}-help`,\n      tabIndex: \"-1\",\n      children: helpText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Loginform, \"71Fc7TLzi7UJjyV7Pe8VU57I03Q=\", false, function () {\n  return [useField];\n});\n\n_c = Loginform;\n\nconst Example = () => {\n  _s2();\n\n  const formik = useFormik({\n    initialValues: {\n      username: ''\n    },\n    onSubmit: async values => {\n      await sleep(500);\n      alert(JSON.stringify(values, null, 2));\n    },\n    validationSchema: Yup.object({\n      username: Yup.string().min(8, 'Must be at least 8 characters').max(20, 'Must be less  than 20 characters').required('Username is required').matches(/^[a-zA-Z0-9]+$/, 'Cannot contain special characters or spaces')\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Loginform, {\n        label: \"Username\",\n        id: \"username\",\n        name: \"username\",\n        helpText: \"Must be 8-20 characters and cannot contain special characters.\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Example, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c2 = Example;\nReactDOM.render( /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"app\",\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"text-4xl\",\n    children: \"Accessible instant feeback with Formik 2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-lg\",\n    children: \"Instant feedback during typing can be extremely helpful in certain situations. For example, checking the validity (or availability) of a username shouldn't require the user to resubmit the form (multiple times). Providing instant feedback while users are typing can allow them to experiment more easily until they find valid input value (like a suitable username). Note: This isn't always optimal, use your judgement.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"example\",\n    children: /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-md mt-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Note:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), \" The displayed feedback message in this example is coded using a \", /*#__PURE__*/_jsxDEV(\"code\", {\n      children: `<div>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 27\n    }, this), \" element that has an\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n      children: `aria-live`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), \" attribute with the value \", /*#__PURE__*/_jsxDEV(\"code\", {\n      children: \"polite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 65\n    }, this), \". The contents of this so called \\\"live region\\\" are conveyed to screen readers and other assistive technology. The value \\\"polite\\\" de-emphasizes the importance of the message and does not cause screen readers to interrupt their current tasks to read aloud this message. Thus the message is only read once when the user stops typing rather than on every keystroke that the user makes.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-sm\",\n    children: /*#__PURE__*/_jsxDEV(\"i\", {\n      children: [\"Example adapted from\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.w3.org/WAI/tutorials/forms/notifications/\",\n        target: \"blank\",\n        rel: \"noopener noreferrer\",\n        children: \"W3C WAI Web Accessibility Tutorials\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 151,\n  columnNumber: 5\n}, this), document.getElementById('root'));\nexport default Loginform;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Loginform\");\n$RefreshReg$(_c2, \"Example\");","map":{"version":3,"sources":["/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx"],"names":["React","ReactDOM","useFormik","FormikProvider","Form","useField","Yup","sleep","ms","Promise","r","setTimeout","Loginform","label","helpText","props","field","meta","didFocus","setDidFocus","useState","handleFocus","showFeedback","value","trim","length","touched","error","id","Example","formik","initialValues","username","onSubmit","values","alert","JSON","stringify","validationSchema","object","string","min","max","required","matches","render","document","getElementById"],"mappings":"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","sourcesContent":["// import { useContext, useState } from \"react\"\n// import { Form, Button } from \"react-bootstrap\"\n// import authService from \"../../services/auth.service\"\n// import { useNavigate } from 'react-router-dom'\n// import { AuthContext } from './../../context/auth.context'\n\n\n// const Loginform = () => {\n\n//     const [loginData, setLoginData] = useState({\n//         password: '',\n//         email: ''\n//     })\n\n//     const navigate = useNavigate()\n\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n\n//     const handleSubmit = e => {\n//         e.preventDefault()\n\n//         authService\n//             .login(loginData)\n//             .then(({ data }) => {\n//                 storeToken(data.authToken)\n//                 authenticateUser()\n//                 navigate('/')\n//             })\n//             .catch(err => console.log(err))\n//     }\n\n//     const handleInputChange = e => {\n//         const { value, name } = e.currentTarget\n//         setLoginData({ ...loginData, [name]: value })\n//     }\n\n//     const { password, email } = loginData\n\n\n\n//     return (\n\n//         <Form onSubmit={handleSubmit}>\n\n//             <Form.Group className=\"mb-3\" controlId=\"email\">\n//                 <Form.Label>Email</Form.Label>\n//                 <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n//             </Form.Group>\n\n//             <Form.Group className=\"mb-3\" controlId=\"password\">\n//                 <Form.Label>Contraseña</Form.Label>\n//                 <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n//             </Form.Group>\n\n//             <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n//         </Form>\n\n//     )\n// }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useFormik, FormikProvider, Form, useField } from 'formik';\nimport './loginForm.css';\nimport * as Yup from 'yup';\n\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\nconst Loginform = ({ label, helpText, ...props }) => {\n    const [field, meta] = useField(props);\n\n    // Show inline feedback if EITHER\n    // - the input is focused AND value is longer than 2 characters\n    // - or, the has been visited (touched === true)\n    const [didFocus, setDidFocus] = React.useState(false);\n    const handleFocus = () => setDidFocus(true);\n    const showFeedback =\n        (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n    return (\n        <div\n            className={`form-control ${showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n                }`}\n        >\n            <div className=\"flex items-center space-between\">\n                <label htmlFor={props.id}>{label}</label>{' '}\n                {showFeedback ? (\n                    <div\n                        id={`${props.id}-feedback`}\n                        aria-live=\"polite\"\n                        className=\"feedback text-sm\"\n                    >\n                        {meta.error ? meta.error : '✓'}\n                    </div>\n                ) : null}\n            </div>\n            <input\n                {...props}\n                {...field}\n                aria-describedby={`${props.id}-feedback ${props.id}-help`}\n                onFocus={handleFocus}\n            />\n            <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n                {helpText}\n            </div>\n        </div>\n    );\n};\n\nconst Example = () => {\n    const formik = useFormik({\n        initialValues: {\n            username: '',\n        },\n        onSubmit: async (values) => {\n            await sleep(500);\n            alert(JSON.stringify(values, null, 2));\n        },\n        validationSchema: Yup.object({\n            username: Yup.string()\n                .min(8, 'Must be at least 8 characters')\n                .max(20, 'Must be less  than 20 characters')\n                .required('Username is required')\n                .matches(\n                    /^[a-zA-Z0-9]+$/,\n                    'Cannot contain special characters or spaces'\n                ),\n        }),\n    });\n\n    return (\n        <FormikProvider value={formik}>\n            <Form>\n                <Loginform\n                    label=\"Username\"\n                    id=\"username\"\n                    name=\"username\"\n                    helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n                    type=\"text\"\n                />\n                <div>\n                    <button type=\"submit\">Submit</button>\n                    <button type=\"reset\">Reset</button>\n                </div>\n            </Form>\n        </FormikProvider>\n    );\n};\n\nReactDOM.render(\n    <div className=\"app\">\n        <h1 className=\"text-4xl\">Accessible instant feeback with Formik 2</h1>\n        <p className=\"text-lg\">\n            Instant feedback during typing can be extremely helpful in certain\n            situations. For example, checking the validity (or availability) of a\n            username shouldn't require the user to resubmit the form (multiple times).\n            Providing instant feedback while users are typing can allow them to\n            experiment more easily until they find valid input value (like a suitable\n            username). Note: This isn't always optimal, use your judgement.\n        </p>\n        <div className=\"example\">\n            <Example />\n        </div>\n        <p className=\"text-md mt-1\">\n            <strong>Note:</strong> The displayed feedback message in this example is\n            coded using a <code>{`<div>`}</code> element that has an{' '}\n            <code>{`aria-live`}</code> attribute with the value <code>polite</code>.\n            The contents of this so called \"live region\" are conveyed to screen\n            readers and other assistive technology. The value \"polite\" de-emphasizes\n            the importance of the message and does not cause screen readers to\n            interrupt their current tasks to read aloud this message. Thus the message\n            is only read once when the user stops typing rather than on every\n            keystroke that the user makes.\n        </p>\n        <p className=\"text-sm\">\n            <i>\n                Example adapted from{' '}\n                <a\n                    href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\"\n                    target=\"blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    W3C WAI Web Accessibility Tutorials\n                </a>\n            </i>\n        </p>\n    </div>,\n    document.getElementById('root')\n);\n\n\n\n\nexport default Loginform"]},"metadata":{},"sourceType":"module"}