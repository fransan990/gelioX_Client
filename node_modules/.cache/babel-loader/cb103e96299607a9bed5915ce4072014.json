{"ast":null,"code":"var _jsxFileName = \"/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport authService from \"../../services/auth.service\";\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from './../../context/auth.context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Loginform = () => {\n  _s();\n\n  const [loginData, setLoginData] = useState({\n    password: '',\n    email: ''\n  });\n  const navigate = useNavigate();\n  const {\n    storeToken,\n    authenticateUser\n  } = useContext(AuthContext);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    authService.login(loginData).then(_ref => {\n      let {\n        data\n      } = _ref;\n      storeToken(data.authToken);\n      authenticateUser();\n      navigate('/');\n    }).catch(err => console.log(err));\n  };\n\n  const handleInputChange = e => {\n    const {\n      value,\n      name\n    } = e.currentTarget;\n    setLoginData({ ...loginData,\n      [name]: value\n    });\n  };\n\n  const {\n    password,\n    email\n  } = loginData;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"email\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"email\",\n        onChange: handleInputChange,\n        name: \"email\",\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"password\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"password\",\n        onChange: handleInputChange,\n        name: \"password\",\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"dark\",\n      type: \"submit\",\n      children: \"Acceder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}; // import React from 'react';\n// import ReactDOM from 'react-dom';\n// import authService from \"../../services/auth.service\"\n// import { useFormik, FormikProvider, Form, useField } from 'formik';\n// import './loginForm.css';\n// import * as Yup from 'yup';\n// const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n// const TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n//     const [field, meta] = useField(props);\n//     // Show inline feedback if EITHER\n//     // - the input is focused AND value is longer than 2 characters\n//     // - or, the has been visited (touched === true)\n//     const [didFocus, setDidFocus] = React.useState(false);\n//     const handleFocus = () => setDidFocus(true);\n//     const showFeedback =\n//         (!!didFocus && field.value.trim().length > 2) || meta.touched;\n//     return (\n//         <div\n//             className={`form-control ${showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n//                 }`}\n//         >\n//             <div className=\"flex items-center space-between\">\n//                 <label htmlFor={props.id}>{label}</label>{' '}\n//                 {showFeedback ? (\n//                     <div\n//                         id={`${props.id}-feedback`}\n//                         aria-live=\"polite\"\n//                         className=\"feedback text-sm\"\n//                     >\n//                         {meta.error ? meta.error : 'âœ“'}\n//                     </div>\n//                 ) : null}\n//             </div>\n//             <input\n//                 {...props}\n//                 {...field}\n//                 aria-describedby={`${props.id}-feedback ${props.id}-help`}\n//                 onFocus={handleFocus}\n//             />\n//             <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n//                 {helpText}\n//             </div>\n//         </div>\n//     );\n// };\n// const Loginform = () => {\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n//     const formik = useFormik({\n//         initialValues: {\n//             email: '',\n//             password: '',\n//         },\n//         onSubmit: async (values) => {\n//             await sleep(500);\n//             alert(JSON.stringify(values, null, 2));\n//             authService\n//                 .login(TextInputLiveFeedback)\n//                 .then(({ data }) => {\n//                     storeToken(data.authToken)\n//                     authenticateUser()\n//                     navigate('/')\n//                 })\n//                 .catch(err => console.log(err))\n//         },\n//         validationSchema: Yup.object({\n//             email: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .max(20, 'Must be less  than 20 characters')\n//                 .required('Email is required')\n//                 .matches(\n//                     /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n//             password: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .required('Password is required')\n//                 .matches(\n//                     /^[a-zA-Z0-9]+$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n//         }),\n//     });\n//     return (\n//         <FormikProvider value={formik}>\n//             <Form>\n//                 <TextInputLiveFeedback\n//                     label=\"Email\"\n//                     id=\"email\"\n//                     name=\"email\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"email\"\n//                 />\n//                 <TextInputLiveFeedback\n//                     label=\"Password\"\n//                     id=\"password\"\n//                     name=\"password\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"password\"\n//                 />\n//                 <div>\n//                     <button type=\"submit\">Submit</button>\n//                     <button type=\"reset\">Reset</button>\n//                 </div>\n//             </Form>\n//         </FormikProvider>\n//     );\n// };\n// export default Loginform\n\n\n_s(Loginform, \"LZDz15GtRENUx9ZNHf45D21gKes=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Loginform;\n\nvar _c;\n\n$RefreshReg$(_c, \"Loginform\");","map":{"version":3,"sources":["/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx"],"names":["useContext","useState","Form","Button","authService","useNavigate","AuthContext","Loginform","loginData","setLoginData","password","email","navigate","storeToken","authenticateUser","handleSubmit","e","preventDefault","login","then","data","authToken","catch","err","console","log","handleInputChange","value","name","currentTarget"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,8BAA5B;;;AAGA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC;AACvCS,IAAAA,QAAQ,EAAE,EAD6B;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAA1C;AAKA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAM;AAAEQ,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAmCd,UAAU,CAACM,WAAD,CAAnD;;AAEA,QAAMS,YAAY,GAAGC,CAAC,IAAI;AACtBA,IAAAA,CAAC,CAACC,cAAF;AAEAb,IAAAA,WAAW,CACNc,KADL,CACWV,SADX,EAEKW,IAFL,CAEU,QAAc;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AAChBP,MAAAA,UAAU,CAACO,IAAI,CAACC,SAAN,CAAV;AACAP,MAAAA,gBAAgB;AAChBF,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH,KANL,EAOKU,KAPL,CAOWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAPlB;AAQH,GAXD;;AAaA,QAAMG,iBAAiB,GAAGV,CAAC,IAAI;AAC3B,UAAM;AAAEW,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBZ,CAAC,CAACa,aAA1B;AACApB,IAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgB,OAACoB,IAAD,GAAQD;AAAxB,KAAD,CAAZ;AACH,GAHD;;AAKA,QAAM;AAAEjB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAsBH,SAA5B;AAIA,sBAEI,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEO,YAAhB;AAAA,4BAEI,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC,OAAvC;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,QAAQ,EAAEW,iBAArC;AAAwD,QAAA,IAAI,EAAC,OAA7D;AAAqE,QAAA,KAAK,EAAEf;AAA5E;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC,UAAvC;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,IAAI,EAAC,UAAnB;AAA8B,QAAA,QAAQ,EAAEe,iBAAxC;AAA2D,QAAA,IAAI,EAAC,UAAhE;AAA2E,QAAA,KAAK,EAAEhB;AAAlF;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAYI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,IAAI,EAAC,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAkBH,CAnDD,C,CAqhLMH,S;UAOeF,W;;;KAPfE,S","sourcesContent":["import { useContext, useState } from \"react\"\nimport { Form, Button } from \"react-bootstrap\"\nimport authService from \"../../services/auth.service\"\nimport { useNavigate } from 'react-router-dom'\nimport { AuthContext } from './../../context/auth.context'\n\n\nconst Loginform = () => {\n\n    const [loginData, setLoginData] = useState({\n        password: '',\n        email: ''\n    })\n\n    const navigate = useNavigate()\n\n    const { storeToken, authenticateUser } = useContext(AuthContext)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        authService\n            .login(loginData)\n            .then(({ data }) => {\n                storeToken(data.authToken)\n                authenticateUser()\n                navigate('/')\n            })\n            .catch(err => console.log(err))\n    }\n\n    const handleInputChange = e => {\n        const { value, name } = e.currentTarget\n        setLoginData({ ...loginData, [name]: value })\n    }\n\n    const { password, email } = loginData\n\n\n\n    return (\n\n        <Form onSubmit={handleSubmit}>\n\n            <Form.Group className=\"mb-3\" controlId=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"password\">\n                <Form.Label>ContraseÃ±a</Form.Label>\n                <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n            </Form.Group>\n\n            <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n        </Form>\n\n    )\n}\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import authService from \"../../services/auth.service\"\n// import { useFormik, FormikProvider, Form, useField } from 'formik';\n// import './loginForm.css';\n// import * as Yup from 'yup';\n\n// const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\n// const TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n//     const [field, meta] = useField(props);\n\n//     // Show inline feedback if EITHER\n//     // - the input is focused AND value is longer than 2 characters\n//     // - or, the has been visited (touched === true)\n//     const [didFocus, setDidFocus] = React.useState(false);\n//     const handleFocus = () => setDidFocus(true);\n//     const showFeedback =\n//         (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n//     return (\n//         <div\n//             className={`form-control ${showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n//                 }`}\n//         >\n//             <div className=\"flex items-center space-between\">\n//                 <label htmlFor={props.id}>{label}</label>{' '}\n//                 {showFeedback ? (\n//                     <div\n//                         id={`${props.id}-feedback`}\n//                         aria-live=\"polite\"\n//                         className=\"feedback text-sm\"\n//                     >\n//                         {meta.error ? meta.error : 'âœ“'}\n//                     </div>\n//                 ) : null}\n//             </div>\n//             <input\n//                 {...props}\n//                 {...field}\n//                 aria-describedby={`${props.id}-feedback ${props.id}-help`}\n//                 onFocus={handleFocus}\n//             />\n//             <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n//                 {helpText}\n//             </div>\n//         </div>\n//     );\n// };\n\n// const Loginform = () => {\n\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n\n\n//     const formik = useFormik({\n//         initialValues: {\n//             email: '',\n//             password: '',\n            \n\n//         },\n//         onSubmit: async (values) => {\n//             await sleep(500);\n//             alert(JSON.stringify(values, null, 2));\n\n//             authService\n//                 .login(TextInputLiveFeedback)\n//                 .then(({ data }) => {\n//                     storeToken(data.authToken)\n//                     authenticateUser()\n//                     navigate('/')\n//                 })\n//                 .catch(err => console.log(err))\n//         },\n//         validationSchema: Yup.object({\n\n//             email: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .max(20, 'Must be less  than 20 characters')\n//                 .required('Email is required')\n//                 .matches(\n//                     /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n\n//             password: Yup.string()\n//                 .min(8, 'Must be at least 8 characters')\n//                 .required('Password is required')\n//                 .matches(\n//                     /^[a-zA-Z0-9]+$/,\n//                     'Cannot contain special characters or spaces'\n//                 ),\n//         }),\n//     });\n\n//     return (\n//         <FormikProvider value={formik}>\n//             <Form>\n//                 <TextInputLiveFeedback\n//                     label=\"Email\"\n//                     id=\"email\"\n//                     name=\"email\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"email\"\n//                 />\n\n//                 <TextInputLiveFeedback\n//                     label=\"Password\"\n//                     id=\"password\"\n//                     name=\"password\"\n//                     helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n//                     type=\"password\"\n//                 />\n//                 <div>\n//                     <button type=\"submit\">Submit</button>\n//                     <button type=\"reset\">Reset</button>\n//                 </div>\n//             </Form>\n//         </FormikProvider>\n//     );\n// };\n\n// export default Loginform\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}