{"ast":null,"code":"var _jsxFileName = \"/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState } from \"react\"; // import { Form, Button } from \"react-bootstrap\"\n// import authService from \"../../services/auth.service\"\n// import { useNavigate } from 'react-router-dom'\n\nimport { AuthContext } from './../../context/auth.context'; // const Loginform = () => {\n//     const [loginData, setLoginData] = useState({\n//         password: '',\n//         email: ''\n//     })\n//     const navigate = useNavigate()\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n//     const handleSubmit = e => {\n//         e.preventDefault()\n//         authService\n//             .login(loginData)\n//             .then(({ data }) => {\n//                 storeToken(data.authToken)\n//                 authenticateUser()\n//                 navigate('/')\n//             })\n//             .catch(err => console.log(err))\n//     }\n//     const handleInputChange = e => {\n//         const { value, name } = e.currentTarget\n//         setLoginData({ ...loginData, [name]: value })\n//     }\n//     const { password, email } = loginData\n//     return (\n//         <Form onSubmit={handleSubmit}>\n//             <Form.Group className=\"mb-3\" controlId=\"email\">\n//                 <Form.Label>Email</Form.Label>\n//                 <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\" controlId=\"password\">\n//                 <Form.Label>Contraseña</Form.Label>\n//                 <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n//             </Form.Group>\n//             <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n//         </Form>\n//     )\n// }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport authService from \"../../services/auth.service\";\nimport { useFormik, FormikProvider, Form, useField } from 'formik';\nimport './loginForm.css';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sleep = ms => new Promise(r => setTimeout(r, ms));\n\nconst TextInputLiveFeedback = _ref => {\n  _s();\n\n  let {\n    label,\n    helpText,\n    ...props\n  } = _ref;\n  const [field, meta] = useField(props); // Show inline feedback if EITHER\n  // - the input is focused AND value is longer than 2 characters\n  // - or, the has been visited (touched === true)\n\n  const [didFocus, setDidFocus] = React.useState(false);\n\n  const handleFocus = () => setDidFocus(true);\n\n  const showFeedback = !!didFocus && field.value.trim().length > 2 || meta.touched;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control ${showFeedback ? meta.error ? 'invalid' : 'valid' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center space-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.id,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), ' ', showFeedback ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: `${props.id}-feedback`,\n        \"aria-live\": \"polite\",\n        className: \"feedback text-sm\",\n        children: meta.error ? meta.error : '✓'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...props,\n      ...field,\n      \"aria-describedby\": `${props.id}-feedback ${props.id}-help`,\n      onFocus: handleFocus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xs\",\n      id: `${props.id}-help`,\n      tabIndex: \"-1\",\n      children: helpText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextInputLiveFeedback, \"71Fc7TLzi7UJjyV7Pe8VU57I03Q=\", false, function () {\n  return [useField];\n});\n\n_c = TextInputLiveFeedback;\n\nconst Loginform = () => {\n  _s2();\n\n  const {\n    storeToken,\n    authenticateUser\n  } = useContext(AuthContext);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: async values => {\n      await sleep(500);\n      alert(JSON.stringify(values, null, 2));\n      authService.login(loginData).then(_ref2 => {\n        let {\n          data\n        } = _ref2;\n        storeToken(data.authToken);\n        authenticateUser();\n        navigate('/');\n      }).catch(err => console.log(err));\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().min(8, 'Must be at least 8 characters').max(20, 'Must be less  than 20 characters').required('Email is required').matches(/^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/, 'Cannot contain special characters or spaces'),\n      password: Yup.string().min(8, 'Must be at least 8 characters').required('Password is required').matches(/^[a-zA-Z0-9]+$/, 'Cannot contain special characters or spaces')\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(TextInputLiveFeedback, {\n        label: \"Email\",\n        id: \"email\",\n        name: \"email\",\n        helpText: \"Must be 8-20 characters and cannot contain special characters.\",\n        type: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInputLiveFeedback, {\n        label: \"Password\",\n        id: \"password\",\n        name: \"password\",\n        helpText: \"Must be 8-20 characters and cannot contain special characters.\",\n        type: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Loginform, \"b7UpxDfqdB9f67tq9SarVPRpfok=\", false, function () {\n  return [useFormik];\n});\n\n_c2 = Loginform;\nexport default Loginform;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextInputLiveFeedback\");\n$RefreshReg$(_c2, \"Loginform\");","map":{"version":3,"sources":["/Users/fran/Desktop/gelioX/client/src/components/LoginForm/LoginForm.jsx"],"names":["useContext","useState","AuthContext","React","ReactDOM","authService","useFormik","FormikProvider","Form","useField","Yup","sleep","ms","Promise","r","setTimeout","TextInputLiveFeedback","label","helpText","props","field","meta","didFocus","setDidFocus","handleFocus","showFeedback","value","trim","length","touched","error","id","Loginform","storeToken","authenticateUser","formik","initialValues","email","password","onSubmit","values","alert","JSON","stringify","login","loginData","then","data","authToken","navigate","catch","err","console","log","validationSchema","object","string","min","max","required","matches"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\"\n// import { Form, Button } from \"react-bootstrap\"\n// import authService from \"../../services/auth.service\"\n// import { useNavigate } from 'react-router-dom'\nimport { AuthContext } from './../../context/auth.context'\n\n\n// const Loginform = () => {\n\n//     const [loginData, setLoginData] = useState({\n//         password: '',\n//         email: ''\n//     })\n\n//     const navigate = useNavigate()\n\n//     const { storeToken, authenticateUser } = useContext(AuthContext)\n\n//     const handleSubmit = e => {\n//         e.preventDefault()\n\n//         authService\n//             .login(loginData)\n//             .then(({ data }) => {\n//                 storeToken(data.authToken)\n//                 authenticateUser()\n//                 navigate('/')\n//             })\n//             .catch(err => console.log(err))\n//     }\n\n//     const handleInputChange = e => {\n//         const { value, name } = e.currentTarget\n//         setLoginData({ ...loginData, [name]: value })\n//     }\n\n//     const { password, email } = loginData\n\n\n\n//     return (\n\n//         <Form onSubmit={handleSubmit}>\n\n//             <Form.Group className=\"mb-3\" controlId=\"email\">\n//                 <Form.Label>Email</Form.Label>\n//                 <Form.Control type=\"email\" onChange={handleInputChange} name=\"email\" value={email} />\n//             </Form.Group>\n\n//             <Form.Group className=\"mb-3\" controlId=\"password\">\n//                 <Form.Label>Contraseña</Form.Label>\n//                 <Form.Control type=\"password\" onChange={handleInputChange} name=\"password\" value={password} />\n//             </Form.Group>\n\n//             <Button variant=\"dark\" type=\"submit\">Acceder</Button>\n//         </Form>\n\n//     )\n// }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport authService from \"../../services/auth.service\"\nimport { useFormik, FormikProvider, Form, useField } from 'formik';\nimport './loginForm.css';\nimport * as Yup from 'yup';\n\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\n\nconst TextInputLiveFeedback = ({ label, helpText, ...props }) => {\n    const [field, meta] = useField(props);\n\n    // Show inline feedback if EITHER\n    // - the input is focused AND value is longer than 2 characters\n    // - or, the has been visited (touched === true)\n    const [didFocus, setDidFocus] = React.useState(false);\n    const handleFocus = () => setDidFocus(true);\n    const showFeedback =\n        (!!didFocus && field.value.trim().length > 2) || meta.touched;\n\n    return (\n        <div\n            className={`form-control ${showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\n                }`}\n        >\n            <div className=\"flex items-center space-between\">\n                <label htmlFor={props.id}>{label}</label>{' '}\n                {showFeedback ? (\n                    <div\n                        id={`${props.id}-feedback`}\n                        aria-live=\"polite\"\n                        className=\"feedback text-sm\"\n                    >\n                        {meta.error ? meta.error : '✓'}\n                    </div>\n                ) : null}\n            </div>\n            <input\n                {...props}\n                {...field}\n                aria-describedby={`${props.id}-feedback ${props.id}-help`}\n                onFocus={handleFocus}\n            />\n            <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\n                {helpText}\n            </div>\n        </div>\n    );\n};\n\nconst Loginform = () => {\n\n    const { storeToken, authenticateUser } = useContext(AuthContext)\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n\n        },\n        onSubmit: async (values) => {\n            await sleep(500);\n            alert(JSON.stringify(values, null, 2));\n\n            authService\n                .login(loginData)\n                .then(({ data }) => {\n                    storeToken(data.authToken)\n                    authenticateUser()\n                    navigate('/')\n                })\n                .catch(err => console.log(err))\n        },\n        validationSchema: Yup.object({\n\n            email: Yup.string()\n                .min(8, 'Must be at least 8 characters')\n                .max(20, 'Must be less  than 20 characters')\n                .required('Email is required')\n                .matches(\n                    /^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/,\n                    'Cannot contain special characters or spaces'\n                ),\n\n            password: Yup.string()\n                .min(8, 'Must be at least 8 characters')\n                .required('Password is required')\n                .matches(\n                    /^[a-zA-Z0-9]+$/,\n                    'Cannot contain special characters or spaces'\n                ),\n        }),\n    });\n\n    return (\n        <FormikProvider value={formik}>\n            <Form>\n                <TextInputLiveFeedback\n                    label=\"Email\"\n                    id=\"email\"\n                    name=\"email\"\n                    helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n                    type=\"email\"\n                />\n\n                <TextInputLiveFeedback\n                    label=\"Password\"\n                    id=\"password\"\n                    name=\"password\"\n                    helpText=\"Must be 8-20 characters and cannot contain special characters.\"\n                    type=\"password\"\n                />\n                <div>\n                    <button type=\"submit\">Submit</button>\n                    <button type=\"reset\">Reset</button>\n                </div>\n            </Form>\n        </FormikProvider>\n    );\n};\n\nexport default Loginform\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}